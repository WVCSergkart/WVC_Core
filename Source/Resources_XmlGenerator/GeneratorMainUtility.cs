using RimWorld;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using Verse;


namespace WVC_UltraExpansion
{

	namespace ImplantGenerator
	{

		public static class GeneratorMainUtility
		{

			public static void GeneratorInitialization()
			{
				GetOrCreateDefsImplants(out string path);
				GetOrCreatePatchesImplants(out string pathPatch);
				XDocument xRecipes = new(new XElement("Patch"));
				foreach (ImplantGeneratorDef generatorDef in DefDatabase<ImplantGeneratorDef>.AllDefsListForReading)
				{
					Generator(generatorDef, out List<ThingDef> thingDefs, out List<RecipeDef> recipeDefs, out List<HediffDef> hediffDefs);
					if (WVC_Ultra.settings.implantGenerator_SaveBaseImplants)
					{
						XDocument xDocument1 = new(new XElement("Defs"));
						XDocument xDocument2 = new(new XElement("Defs"));
						XDocument xDocument3 = new(new XElement("Defs"));
						foreach (HediffDef hediffDef in hediffDefs)
						{
							xDocument1.Element("Defs").Add(GenerateHediffDefFile(hediffDef, generatorDef));
						}
						foreach (RecipeDef recipeDef in recipeDefs)
						{
							xDocument2.Element("Defs").Add(GenerateSurgeryDefFile(recipeDef, generatorDef));
						}
						foreach (ThingDef thingDef in thingDefs)
						{
							xDocument3.Element("Defs").Add(GenerateThingDefFile(thingDef, generatorDef));
						}
						xDocument1.Save(Path.Combine(path, "HediffDef_" + generatorDef.defName + ".xml"));
						if (!generatorDef.forMechs)
						{
							xDocument2.Save(Path.Combine(path, "RecipeDef_" + generatorDef.defName + ".xml"));
						}
						xDocument3.Save(Path.Combine(path, "ThingDef_" + generatorDef.defName + ".xml"));
					}
					if (WVC_Ultra.settings.implantGenerator_FullLogging)
					{
						Log.Message("Generared Things:" + "\n" + thingDefs.Select((ThingDef x) => x.defName).ToLineList(" - "));
						Log.Message("Generared Recipes:" + "\n" + recipeDefs.Select((RecipeDef x) => x.defName).ToLineList(" - "));
						Log.Message("Generared Hediffs:" + "\n" + hediffDefs.Select((HediffDef x) => x.defName).ToLineList(" - "));
					}
					if (WVC_Ultra.settings.implantGenerator_SaveRecipeDefsInList)
					{
						// XElement xRecipesValue = xRecipes.Element("value");
						// foreach (RecipeDef recipeDef in recipeDefs)
						// {
							// xRecipesValue.Add(new XElement("li", recipeDef.defName));
						// }
						xRecipes.Element("Patch").Add(GenerateAnimalRecipePatch(recipeDefs, generatorDef));
					}
				}
				if (WVC_Ultra.settings.implantGenerator_SaveRecipeDefsInList)
				{
					xRecipes.Save(Path.Combine(pathPatch, "PatchAnimalRecipes_Implants.xml"));
					Log.Message("Patches re-generated by path: " + pathPatch);
					Messages.Message("Patches re-generated by path: " + pathPatch, MessageTypeDefOf.TaskCompletion, historical: false);
				}
				if (WVC_Ultra.settings.implantGenerator_SaveBaseImplants)
				{
					Log.Message("Defs re-generated by path: " + path);
					Messages.Message("Defs re-generated by path: " + path, MessageTypeDefOf.TaskCompletion, historical: false);
				}
			}

			public static XElement GenerateAnimalRecipePatch(List<RecipeDef> defs, ImplantGeneratorDef generatorDef)
			{
				// foreach (RecipeDef recipeDef in defs)
				// {
					// if (!recipeDef.defName.Contains("Animal"))
					// {
						// return null;
					// }
				// }
				if (!generatorDef.forAnimals)
				{
					return null;
				}
				XElement xElement = new ("Operation", new XAttribute("Class", "PatchOperationAdd"), new XElement("xpath", "/Defs/ThingDef[@Name=\"" + "AnimalThingBase" + "\"]/recipes"), new XElement("value"));
				XElement xValue = xElement.Element("value");
				foreach (RecipeDef recipeDef in defs)
				{
					if (generatorDef.mayRequire != null)
					{
						xValue.Add(new XElement("li", new XAttribute("MayRequire", generatorDef.mayRequire), recipeDef.defName));
					}
					else
					{
						xValue.Add(new XElement("li", recipeDef.defName));
					}
					// if (generatorDef.mayRequire != null)
					// {
						// XElement li = xValue.Element("li");
						// li.Add(new XAttribute("MayRequire", generatorDef.mayRequire));
					// }
				}
				// if (generatorDef.mayRequire != null)
				// {
					// xElement.Add(new XAttribute("MayRequire", generatorDef.mayRequire));
				// }
				return xElement;
			}

			public static void Generator(ImplantGeneratorDef implantGeneratorDef, out List<ThingDef> thingDefs, out List<RecipeDef> recipeDefs, out List<HediffDef> hediffDefs)
			{
				thingDefs = new();
				recipeDefs = new();
				hediffDefs = new();
				foreach (BodyPartDef bodyPartDef in implantGeneratorDef.bodyPartDefs)
				{
					GetFromTemplate_ThingDef(bodyPartDef, implantGeneratorDef, out ThingDef thingDef);
					GetFromTemplate_HediffDef(bodyPartDef, thingDef, implantGeneratorDef, out HediffDef hediffDef);
					if (implantGeneratorDef.forMechs && hediffDef != null)
					{
						thingDef.comps = new List<CompProperties>
						{
							new CompProperties_TargetEffect_InstallImplantInTarget
							{
								jobDef = implantGeneratorDef.installJobDef,
								moteDef = implantGeneratorDef.installMoteDef,
								bodyPart = bodyPartDef,
								hediffDef = hediffDef
							}
						};
					}
					if (!implantGeneratorDef.forMechs)
					{
						GetFromTemplate_SurgeryDef(bodyPartDef, thingDef, hediffDef, out RecipeDef recipeDef);
						recipeDefs.Add(recipeDef);
						if (implantGeneratorDef.generateRemoveRecipe)
						{
							GetFromTemplate_SurgeryRemoveDef(thingDef, hediffDef, out RecipeDef recipeDef2);
							recipeDefs.Add(recipeDef2);
						}
					}
					thingDefs.Add(thingDef);
					hediffDefs.Add(hediffDef);
				}
			}

			public static void GetOrCreatePatchesImplants(out string path)
			{
				DirectoryInfo directoryInfo = new(Path.Combine(new DirectoryInfo(GenFilePaths.ModsFolderPath).ToString(), "WVC_Core"));
				if (!directoryInfo.Exists)
				{
					directoryInfo.Create();
				}
				DirectoryInfo directoryInfo4 = new(Path.Combine(directoryInfo.ToString(), "1.4"));
				if (!directoryInfo4.Exists)
				{
					directoryInfo4.Create();
				}
				DirectoryInfo directoryInfo5 = new(Path.Combine(directoryInfo4.ToString(), "Patches"));
				if (!directoryInfo5.Exists)
				{
					directoryInfo5.Create();
				}
				path = Path.Combine(directoryInfo5.ToString());
			}

			public static void GetOrCreateDefsImplants(out string path)
			{
				DirectoryInfo directoryInfo = new(Path.Combine(new DirectoryInfo(GenFilePaths.ModsFolderPath).ToString(), "WVC_Core"));
				if (!directoryInfo.Exists)
				{
					directoryInfo.Create();
				}
				DirectoryInfo directoryInfo4 = new(Path.Combine(directoryInfo.ToString(), "1.4"));
				if (!directoryInfo4.Exists)
				{
					directoryInfo4.Create();
				}
				DirectoryInfo directoryInfo5 = new(Path.Combine(directoryInfo4.ToString(), "Defs"));
				if (!directoryInfo5.Exists)
				{
					directoryInfo5.Create();
				}
				DirectoryInfo directoryInfo6 = new(Path.Combine(directoryInfo5.ToString(), "Implants"));
				if (!directoryInfo6.Exists)
				{
					directoryInfo6.Create();
				}
				path = Path.Combine(directoryInfo6.ToString());
			}

			public static XElement GenerateThingDefFile(ThingDef def, ImplantGeneratorDef generatorDef)
			{
				XElement xElement = new("ThingDef", new XAttribute("ParentName", generatorDef.inheritThing), new XElement("defName", def.defName), new XElement("label", def.label), new XElement("descriptionHyperlinks"), new XElement("costList"), new XElement("graphicData"), new XElement("comps"));
				XElement costList = xElement.Element("costList");
				foreach (var i in def.costList)
				{
					costList.Add(new XElement(i.thingDef.defName, i.count));
				}
				XElement descriptionHyperlinks = xElement.Element("descriptionHyperlinks");
				foreach (var i in def.descriptionHyperlinks)
				{
					if (i.def is ThingDef)
					{
						descriptionHyperlinks.Add(new XElement("ThingDef", i.def.defName));
					}
					if (i.def is RecipeDef)
					{
						descriptionHyperlinks.Add(new XElement("RecipeDef", i.def.defName));
					}
					if (i.def is HediffDef)
					{
						descriptionHyperlinks.Add(new XElement("HediffDef", i.def.defName));
					}
				}
				if (def.graphicData.texPath != null)
				{
					XElement graphicData = xElement.Element("graphicData");
					graphicData.Add(new XElement("texPath", def.graphicData.texPath));
				}
				if (!def.comps.NullOrEmpty())
				{
					// Log.Error("1");
					XElement comps = xElement.Element("comps");
					foreach (var comp in def.comps)
					{
						if (generatorDef.forMechs && comp.compClass == typeof(CompTargetEffect_InstallImplantInTarget))
						{
							CompProperties_TargetEffect_InstallImplantInTarget install_comp = (CompProperties_TargetEffect_InstallImplantInTarget)comp;
							comps.Add(new XElement("li", new XAttribute("Class", "WVC_UltraExpansion.CompProperties_TargetEffect_InstallImplantInTarget")));
							XElement li = comps.Element("li");
							li.Add(new XElement("jobDef", install_comp.jobDef));
							li.Add(new XElement("bodyPart", install_comp.bodyPart));
							li.Add(new XElement("hediffDef", install_comp.hediffDef));
							li.Add(new XElement("moteDef", install_comp.moteDef));
						}
					}
				}
				// XElement costList = xElement.Element("costList");
				// foreach (var i in def.costList)
				// {
					// costList.Add(new XElement(i.thingDef.defName, i.count));
				// }
				// XmlAttribute xmlAttribute = xElement.OwnerDocument.CreateAttribute("ParentName");
				// xmlAttribute.Value = "WVC_ParentName";
				// xElement.Attributes.Append(xmlAttribute);
				// string name = "ParentName";
				// xElement.SetAttributeValue(name, "WVC_Ultra_ImplantThingDef_" + generatorDef.defName);
				if (generatorDef.mayRequire != null)
				{
					xElement.Add(new XAttribute("MayRequire", generatorDef.mayRequire));
				}
				return xElement;
			}

			public static void GetFromTemplate_ThingDef(BodyPartDef def, ImplantGeneratorDef implantGeneratorDef, out ThingDef thingDef)
			{

				thingDef = new()
				{
					defName = implantGeneratorDef.defName + "_" + def.defName + "_" + implantGeneratorDef.inNameTag,
					label = implantGeneratorDef.label.Formatted(def.label),
					// description = implantGeneratorDef.description.Formatted(def.label),
					descriptionHyperlinks = new(),
					// techLevel = implantGeneratorDef.techLevel,
					// thingCategories = implantGeneratorDef.thingCategories,
					// graphicData = implantGeneratorDef.graphicData,
					costList = new(),
					graphicData = new()
					// stackLimit = template.stackLimit,
					// statBases = template.statBases,
					// tradeTags = implantGeneratorDef.tradeTags,
					// techHediffsTags = implantGeneratorDef.techHediffsTags,
					// thingSetMakerTags = implantGeneratorDef.thingSetMakerTags,
					// thingClass = template.thingClass,
					// category = template.category,
					// drawerType = template.drawerType,
					// altitudeLayer = template.altitudeLayer,
					// tickerType = template.tickerType,
					// label = template.label,
					// label = template.label,
					// label = template.label,
					// modExtensions = template.modExtensions,
					// comps = template.comps,
					// pathCost = template.pathCost,
					// allowedArchonexusCount = 1,
					// isTechHediff = true,
					// alwaysHaulable = true,
					// selectable = true,
					// useHitPoints = true,
					// drawGUIOverlay = true
				};
				List<ChangesByPart> costByPart = implantGeneratorDef.changesByPart;
				for (int i = 0; i < costByPart.Count; i++)
				{
					if (def == costByPart[i].def)
					{
						if (costByPart[i].label != null)
						{
							thingDef.label = implantGeneratorDef.label.Formatted(costByPart[i].label);
						}
						thingDef.costList = costByPart[i].costList;
						if (costByPart[i].texPath != null)
						{
							thingDef.graphicData.texPath = costByPart[i].texPath;
						}
						break;
					}
				}
				// if (template.hediffTemplateDef != null)
				// {
					// DefGenerator.AddImpliedDef(GetFromTemplate_HediffDef(template.hediffTemplateDef, def, thingDef, implantGeneratorDef));
					// GetFromTemplate_HediffDef(template.hediffTemplateDef, def, thingDef, implantGeneratorDef);
				// }
				// if (template.craftTemplateDef != null)
				// {
					// GetFromTemplate_CraftDef(template.craftTemplateDef, thingDef, implantGeneratorDef);
				// }
				// PostInitializationDefGenerator.thingDefs.Add(thingDef);
				// return thingDef;
			}

			// Outdated
			// public static RecipeDef GetFromTemplate_CraftDef(CraftTemplateDef template, ThingDef thingDef, ImplantGeneratorDef implantGeneratorDef)
			// {
				// string text = thingDef.label;
				// RecipeDef recipeDef = new()
				// {
					// defName = "Make_" + thingDef.defName,
					// label = "RecipeMake".Translate(text),
					// jobString = "RecipeMakeJobString".Translate(text),
					// modContentPack = thingDef.modContentPack,
					// displayPriority = template.displayPriority,
					// workAmount = template.workAmount * template.adjustedCount,
					// workSpeedStat = template.workSpeedStat,
					// efficiencyStat = template.efficiencyStat,
					// useIngredientsForColor = false,
					// defaultIngredientFilter = template.defaultIngredientFilter,
					// targetCountAdjustment = template.targetCountAdjustment,
					// skillRequirements = implantGeneratorDef.craftingSkillRequirements,
					// workSkill = template.workSkill,
					// workSkillLearnFactor = template.workSkillLearnFactor,
					// requiredGiverWorkType = template.requiredGiverWorkType,
					// unfinishedThingDef = template.unfinishedThingDef,
					// recipeUsers = implantGeneratorDef.recipeUsers.ListFullCopyOrNull(),
					// mechanitorOnlyRecipe = template.mechanitorOnlyRecipe,
					// effectWorking = template.effectWorking,
					// soundWorking = template.soundWorking,
					// memePrerequisitesAny = implantGeneratorDef.memePrerequisitesAny,
					// researchPrerequisites = implantGeneratorDef.researchPrerequisites
				// };
				// recipeDef.descriptionHyperlinks = recipeDef.products.Select((ThingDefCountClass p) => new DefHyperlink(p.thingDef)).ToList();
				// recipeDef.products.Add(new ThingDefCountClass(thingDef, 1 * template.adjustedCount));
				// string[] items = recipeDef.products.Select((ThingDefCountClass p) => (p.count != 1) ? p.Label : Find.ActiveLanguageWorker.WithIndefiniteArticle(p.thingDef.label)).ToArray();
				// recipeDef.description = "RecipeMakeDescription".Translate(items.ToCommaList(useAnd: true));
				// if (template.adjustedCount != 1)
				// {
					// text = text + " x" + template.adjustedCount;
				// }
				// RecipeDefGenerator.SetIngredients(recipeDef, thingDef, template.adjustedCount);
				// if (thingDef.costListForDifficulty != null)
				// {
					// recipeDef.regenerateOnDifficultyChange = true;
				// }
				// return recipeDef;
			// }
			// Outdated

			public static XElement GenerateHediffDefFile(HediffDef def, ImplantGeneratorDef generatorDef)
			{
				XElement xElement = new("HediffDef", new XAttribute("ParentName", generatorDef.inheritHediff), new XElement("defName", def.defName), new XElement("label", def.label), new XElement("labelNoun", def.labelNoun), new XElement("description", def.description), new XElement("descriptionHyperlinks"), new XElement("spawnThingOnRemoved", def.spawnThingOnRemoved.defName), new XElement("stages"), new XElement("comps"));
				XElement descriptionHyperlinks = xElement.Element("descriptionHyperlinks");
				// Log.Error("1");
				foreach (var i in def.descriptionHyperlinks)
				{
					if (i.def is ThingDef)
					{
						descriptionHyperlinks.Add(new XElement("ThingDef", i.def.defName));
					}
					if (i.def is RecipeDef)
					{
						descriptionHyperlinks.Add(new XElement("RecipeDef", i.def.defName));
					}
					if (i.def is HediffDef)
					{
						descriptionHyperlinks.Add(new XElement("HediffDef", i.def.defName));
					}
				}
				// Log.Error("2");
				if (def.eyeGraphicEast != null)
				{
					// XElement hediffDef = xElement.Element("HediffDef");
					xElement.Add(new XElement("eyeGraphicEast"));

					XElement eyeGraphicEast = xElement.Element("eyeGraphicEast");

					eyeGraphicEast.Add(new XElement("graphicClass", def.eyeGraphicEast.graphicClass));
					eyeGraphicEast.Add(new XElement("texPath", def.eyeGraphicEast.texPath));
				}
				// Log.Error("3");
				if (def.eyeGraphicSouth != null)
				{
					// XElement hediffDef = xElement.Element("HediffDef");
					xElement.Add(new XElement("eyeGraphicSouth"));

					XElement eyeGraphicSouth = xElement.Element("eyeGraphicSouth");

					eyeGraphicSouth.Add(new XElement("graphicClass", def.eyeGraphicSouth.graphicClass));
					eyeGraphicSouth.Add(new XElement("texPath", def.eyeGraphicSouth.texPath));
				}
				// Log.Error("partEfficiency");
				if (def.addedPartProps != null && def.addedPartProps.partEfficiency != 1f)
				{
					// XElement hediffDef = xElement.Element("HediffDef");
					xElement.Add(new XElement("addedPartProps"));
					XElement addedPartProp = xElement.Element("addedPartProps");
					addedPartProp.Add(new XElement("partEfficiency", def.addedPartProps.partEfficiency));
				}
				// Log.Error("After partEfficiency");
				XElement stages = xElement.Element("stages");
				if (!def.stages.NullOrEmpty())
				{
					foreach (var stage in def.stages)
					{
						stages.Add(new XElement("li"));
						XElement li = stages.Element("li");
						if (!stage.statOffsets.NullOrEmpty())
						{
							li.Add(new XElement("statOffsets"));
							XElement statOffsets = li.Element("statOffsets");
							foreach (var statOffset in stage.statOffsets)
							{
								string mayRequire = "MayRequire";
								string statName = statOffset.stat.defName;
								statOffsets.Add(new XElement(statName, statOffset.value));
								if (statOffset.stat == StatDefOf.MechBandwidth || statOffset.stat == StatDefOf.ToxicEnvironmentResistance)
								{
									statOffsets.Element(statName).SetAttributeValue(mayRequire, "Ludeon.RimWorld.Biotech");
								}
							}
						}
						if (!stage.statFactors.NullOrEmpty())
						{
							li.Add(new XElement("statFactors"));
							XElement statFactors = li.Element("statFactors");
							foreach (var statOffset in stage.statFactors)
							{
								string mayRequire = "MayRequire";
								string statName = statOffset.stat.defName;
								statFactors.Add(new XElement(statName, statOffset.value));
								if (statOffset.stat == StatDefOf.MechBandwidth || statOffset.stat == StatDefOf.ToxicEnvironmentResistance)
								{
									statFactors.Element(statName).SetAttributeValue(mayRequire, "Ludeon.RimWorld.Biotech");
								}
							}
						}
						// Log.Error("CapMods");
						if (!stage.capMods.NullOrEmpty())
						{
							li.Add(new XElement("capMods"));
							XElement capMods = li.Element("capMods");
							// Log.Error("1");
							foreach (var capMod in stage.capMods)
							{
								capMods.Add(new XElement("li"));
								XElement capMods_li = capMods.Element("li");
								capMods_li.Add(new XElement("capacity", capMod.capacity));
								// Log.Error("2");
								if (capMod.setMax <= 1f)
								{
									capMods_li.Add(new XElement("setMax", capMod.setMax));
								}
								// Log.Error("3");
								if (capMod.offset != 0f)
								{
									capMods_li.Add(new XElement("offset", capMod.offset));
								}
								// Log.Error("4");
								if (capMod.postFactor != 1f)
								{
									capMods_li.Add(new XElement("postFactor", capMod.postFactor));
								}
							}
						}
						// Log.Error("After CapMods");
						if (stage.hungerRateFactor != 1f)
						{
							li.Add(new XElement("hungerRateFactor", stage.hungerRateFactor));
						}
						// Log.Error("foodPoisoningChanceFactor");
						if (stage.foodPoisoningChanceFactor != 1f)
						{
							li.Add(new XElement("foodPoisoningChanceFactor", stage.foodPoisoningChanceFactor));
						}
						// Log.Error("naturalHealingFactor");
						if (stage.naturalHealingFactor != -1f)
						{
							li.Add(new XElement("naturalHealingFactor", stage.naturalHealingFactor));
						}
						// Log.Error("totalBleedFactor");
						if (stage.totalBleedFactor != 1f)
						{
							li.Add(new XElement("totalBleedFactor", stage.totalBleedFactor));
						}
						if (stage.painOffset != 0f)
						{
							li.Add(new XElement("painOffset", stage.painOffset));
						}
						if (stage.painFactor != 1f)
						{
							li.Add(new XElement("painFactor", stage.painFactor));
						}
					}
				}
				// Log.Error("Comps");
				if (!def.comps.NullOrEmpty())
				{
					// Log.Error("1");
					XElement comps = xElement.Element("comps");
					foreach (var comp in def.comps)
					{
						// Log.Error("2");
						comps.Add(new XElement("li", new XAttribute("Class", "HediffCompProperties_VerbGiver")));
						XElement li = comps.Element("li");
						// string nameClass = "Class";
						// li.SetAttributeValue(nameClass, "HediffCompProperties_VerbGiver");
						li.Add(new XElement("tools"));
						XElement tools = li.Element("tools");
						// tools = comp as HediffCompProperties_VerbGiver;
						// Log.Error("3");
						HediffCompProperties_VerbGiver verb = (HediffCompProperties_VerbGiver)comp;
						foreach (var tool in verb.tools)
						{
							// Log.Error("4");
							tools.Add(new XElement("li"));
							XElement tools_li = tools.Element("li");
							tools_li.Add(new XElement("label", tool.label));
							tools_li.Add(new XElement("capacities"));
							XElement capacities = tools_li.Element("capacities");
							// Log.Error("5");
							if (!tool.capacities.NullOrEmpty())
							{
								foreach (var capacitie in tool.capacities)
								{
									capacities.Add(new XElement("li", capacitie));
								}
							}
							tools_li.Add(new XElement("cooldownTime", tool.cooldownTime));
							tools_li.Add(new XElement("power", tool.power));
							tools_li.Add(new XElement("chanceFactor", tool.chanceFactor));
							if (tool.soundMeleeHit != null)
							{
								tools_li.Add(new XElement("soundMeleeHit", tool.soundMeleeHit));
							}
							if (tool.soundMeleeMiss != null)
							{
								tools_li.Add(new XElement("soundMeleeMiss", tool.soundMeleeMiss));
							}
						}
					}
				}
				// Log.Error("After Comps");
				// string name = "ParentName";
				if (generatorDef.mayRequire != null)
				{
					xElement.Add(new XAttribute("MayRequire", generatorDef.mayRequire));
				}
				return xElement;
			}

			public static void GetFromTemplate_HediffDef(BodyPartDef def, ThingDef thingDef, ImplantGeneratorDef implantGeneratorDef, out HediffDef hediffDef)
			{

				hediffDef = new()
				{
					// defName = "Hediff_" + thingDef.defName,
					// In the vanilla game, Hediffs are the same name as Things
					defName = thingDef.defName,
					label = implantGeneratorDef.label.Formatted(def.label),
					labelNoun = implantGeneratorDef.labelNoun.Formatted(def.label),
					description = "An installed" + " " + thingDef.label + ".",
					descriptionHyperlinks = new(),
					spawnThingOnRemoved = thingDef,
					addedPartProps = new()
				};
				List<ChangesByPart> stageByPart = implantGeneratorDef.changesByPart;
				// mayRequire;
				for (int i = 0; i < stageByPart.Count; i++)
				{
					if (def == stageByPart[i].def)
					{
						if (stageByPart[i].label != null)
						{
							hediffDef.label = implantGeneratorDef.label.Formatted(stageByPart[i].label);
							hediffDef.labelNoun = implantGeneratorDef.labelNoun.Formatted(stageByPart[i].label);
						}
						hediffDef.stages = stageByPart[i].stages;
						hediffDef.comps = stageByPart[i].comps;
						if (stageByPart[i].eyeGraphicEast != null)
						{
							hediffDef.eyeGraphicEast = stageByPart[i].eyeGraphicEast;
						}
						if (stageByPart[i].eyeGraphicSouth != null)
						{
							hediffDef.eyeGraphicSouth = stageByPart[i].eyeGraphicSouth;
						}
						if (stageByPart[i].partEfficiency != 1f)
						{
							hediffDef.addedPartProps.partEfficiency = stageByPart[i].partEfficiency;
						}
						// if (stageByPart[i].mayRequire != null)
						// {
							// mayRequire = stageByPart[i].mayRequire;
						// }
						break;
					}
				}
				// if (template.stages != null)
				// {
					// foreach (HediffStage item in template.stages)
					// {
						// hediffDef.stages.Add(item);
					// }
				// }
				// if (template.comps != null)
				// {
					// foreach (HediffCompProperties item in template.comps)
					// {
						// hediffDef.comps.Add(item);
					// }
				// }
				// if (template.surgeryTemplateDef != null)
				// {
					// DefGenerator.AddImpliedDef(GetFromTemplate_SurgeryDef(template.surgeryTemplateDef, def, thingDef, hediffDef, implantGeneratorDef));
					// GetFromTemplate_SurgeryDef(template.surgeryTemplateDef, def, thingDef, hediffDef, implantGeneratorDef);
				// }
				hediffDef.descriptionHyperlinks.Add(thingDef);
				// PostInitializationDefGenerator.hediffDefs.Add(hediffDef);
				// return hediffDef;
			}

			public static XElement GenerateSurgeryDefFile(RecipeDef def, ImplantGeneratorDef generatorDef)
			{
				string surgeryName = generatorDef.inheritSurgery;
				if (def.removesHediff != null)
				{
					surgeryName = generatorDef.inheritSurgeryRemove;
				}
				XElement xElement = new("RecipeDef", new XAttribute("ParentName", surgeryName), new XElement("defName", def.defName), new XElement("label", def.label), new XElement("description", def.description), new XElement("jobString", def.jobString), new XElement("descriptionHyperlinks"));
				XElement descriptionHyperlinks = xElement.Element("descriptionHyperlinks");
				foreach (var i in def.descriptionHyperlinks)
				{
					if (i.def is ThingDef)
					{
						descriptionHyperlinks.Add(new XElement("ThingDef", i.def.defName));
					}
					if (i.def is RecipeDef)
					{
						descriptionHyperlinks.Add(new XElement("RecipeDef", i.def.defName));
					}
					if (i.def is HediffDef)
					{
						descriptionHyperlinks.Add(new XElement("HediffDef", i.def.defName));
					}
				}
				if (def.addsHediff != null)
				{
					xElement.Add(new XElement("addsHediff", def.addsHediff.defName));
				}
				if (def.removesHediff != null)
				{
					xElement.Add(new XElement("removesHediff", def.removesHediff.defName));
				}
				if (def.appliedOnFixedBodyParts != null)
				{
					xElement.Add(new XElement("appliedOnFixedBodyParts"));
					XElement appliedOnFixedBodyParts = xElement.Element("appliedOnFixedBodyParts");
					foreach (var i in def.appliedOnFixedBodyParts)
					{
						appliedOnFixedBodyParts.Add(new XElement("li", i.defName));
					}
				}
				if (def.ingredients != null)
				{
					xElement.Add(new XElement("ingredients"));
					xElement.Add(new XElement("fixedIngredientFilter"));
					XElement ingredients = xElement.Element("ingredients");
					XElement fixedIngredientFilter = xElement.Element("fixedIngredientFilter");
					foreach (var ingredient in def.ingredients)
					{
						ingredients.Add(new XElement("li"));
						XElement li = ingredients.Element("li");
						li.Add(new XElement("filter"));
						XElement filter = li.Element("filter");
						filter.Add(new XElement("thingDefs"));
						XElement filterDefs = filter.Element("thingDefs");
						filterDefs.Add(new XElement("li", ingredient.FixedIngredient.defName));

						fixedIngredientFilter.Add(new XElement("thingDefs"));
						XElement fixedIngredientFilterli = fixedIngredientFilter.Element("thingDefs");
						fixedIngredientFilterli.Add(new XElement("li", ingredient.FixedIngredient.defName));
					}
				}
				// string name = "ParentName";
				// xElement.SetAttributeValue(name, "WVC_Ultra_ImplantSurgeryDef_Base");
				if (generatorDef.mayRequire != null)
				{
					xElement.Add(new XAttribute("MayRequire", generatorDef.mayRequire));
				}
				return xElement;
			}

			public static void GetFromTemplate_SurgeryDef(BodyPartDef def, ThingDef thingDef, HediffDef hediffDef, out RecipeDef recipeDef)
			{
				recipeDef = new()
				{
					defName = "Install_" + hediffDef.defName,
					label = "install" + " " + thingDef.label,
					description = "Install an" + " " + thingDef.label + ".",
					jobString = "Installing" + " " + thingDef.label + ".",
					descriptionHyperlinks = new(),
					appliedOnFixedBodyParts = new List<BodyPartDef>
					{
						def
					},
					addsHediff = hediffDef,
				};
				IngredientCount ingredientCount = new();
				ingredientCount.SetBaseCount(1);
				ingredientCount.filter.SetAllow(thingDef, true);
				// recipeDef.ingredients = template.ingredients.ListFullCopyOrNull();
				recipeDef.ingredients.Add(ingredientCount);
				// recipeDef.fixedIngredientFilter = template.fixedIngredientFilter;
				recipeDef.fixedIngredientFilter.SetAllow(thingDef, true);
				// recipeDef.appliedOnFixedBodyParts.Add(def);
				recipeDef.descriptionHyperlinks.Add(thingDef);
				recipeDef.descriptionHyperlinks.Add(hediffDef);
				thingDef.descriptionHyperlinks.Add(recipeDef);
				hediffDef.descriptionHyperlinks.Add(recipeDef);
				// PostInitializationDefGenerator.recipeDefs.Add(recipeDef);
				// return recipeDef;
			}

			public static void GetFromTemplate_SurgeryRemoveDef(ThingDef thingDef, HediffDef hediffDef, out RecipeDef recipeDef)
			{
				recipeDef = new()
				{
					defName = "Remove_" + hediffDef.defName,
					label = "remove" + " " + thingDef.label,
					description = "remove an" + " " + thingDef.label + ".",
					jobString = "Removing" + " " + thingDef.label + ".",
					descriptionHyperlinks = new(),
					removesHediff = hediffDef,
				};
				recipeDef.descriptionHyperlinks.Add(thingDef);
				recipeDef.descriptionHyperlinks.Add(hediffDef);
			}

		}
	}

}
